// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_playlist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_playlist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_playlist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_playlist_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_playlist_2eproto;
namespace playlist {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class NextPrevRequest;
struct NextPrevRequestDefaultTypeInternal;
extern NextPrevRequestDefaultTypeInternal _NextPrevRequest_default_instance_;
class Song;
struct SongDefaultTypeInternal;
extern SongDefaultTypeInternal _Song_default_instance_;
class SongList;
struct SongListDefaultTypeInternal;
extern SongListDefaultTypeInternal _SongList_default_instance_;
}  // namespace playlist
PROTOBUF_NAMESPACE_OPEN
template<> ::playlist::Empty* Arena::CreateMaybeMessage<::playlist::Empty>(Arena*);
template<> ::playlist::NextPrevRequest* Arena::CreateMaybeMessage<::playlist::NextPrevRequest>(Arena*);
template<> ::playlist::Song* Arena::CreateMaybeMessage<::playlist::Song>(Arena*);
template<> ::playlist::SongList* Arena::CreateMaybeMessage<::playlist::SongList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace playlist {

enum NextPrevRequest_Direction : int {
  NextPrevRequest_Direction_PREV = 0,
  NextPrevRequest_Direction_NEXT = 1,
  NextPrevRequest_Direction_NextPrevRequest_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NextPrevRequest_Direction_NextPrevRequest_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NextPrevRequest_Direction_IsValid(int value);
constexpr NextPrevRequest_Direction NextPrevRequest_Direction_Direction_MIN = NextPrevRequest_Direction_PREV;
constexpr NextPrevRequest_Direction NextPrevRequest_Direction_Direction_MAX = NextPrevRequest_Direction_NEXT;
constexpr int NextPrevRequest_Direction_Direction_ARRAYSIZE = NextPrevRequest_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NextPrevRequest_Direction_descriptor();
template<typename T>
inline const std::string& NextPrevRequest_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NextPrevRequest_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NextPrevRequest_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NextPrevRequest_Direction_descriptor(), enum_t_value);
}
inline bool NextPrevRequest_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NextPrevRequest_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NextPrevRequest_Direction>(
    NextPrevRequest_Direction_descriptor(), name, value);
}
// ===================================================================

class Song final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playlist.Song) */ {
 public:
  inline Song() : Song(nullptr) {}
  ~Song() override;
  explicit PROTOBUF_CONSTEXPR Song(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Song(const Song& from);
  Song(Song&& from) noexcept
    : Song() {
    *this = ::std::move(from);
  }

  inline Song& operator=(const Song& from) {
    CopyFrom(from);
    return *this;
  }
  inline Song& operator=(Song&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Song& default_instance() {
    return *internal_default_instance();
  }
  static inline const Song* internal_default_instance() {
    return reinterpret_cast<const Song*>(
               &_Song_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Song& a, Song& b) {
    a.Swap(&b);
  }
  inline void Swap(Song* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Song* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Song* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Song>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Song& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Song& from) {
    Song::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Song* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playlist.Song";
  }
  protected:
  explicit Song(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 duration = 2;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:playlist.Song)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playlist_2eproto;
};
// -------------------------------------------------------------------

class NextPrevRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playlist.NextPrevRequest) */ {
 public:
  inline NextPrevRequest() : NextPrevRequest(nullptr) {}
  ~NextPrevRequest() override;
  explicit PROTOBUF_CONSTEXPR NextPrevRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NextPrevRequest(const NextPrevRequest& from);
  NextPrevRequest(NextPrevRequest&& from) noexcept
    : NextPrevRequest() {
    *this = ::std::move(from);
  }

  inline NextPrevRequest& operator=(const NextPrevRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextPrevRequest& operator=(NextPrevRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextPrevRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextPrevRequest* internal_default_instance() {
    return reinterpret_cast<const NextPrevRequest*>(
               &_NextPrevRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NextPrevRequest& a, NextPrevRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NextPrevRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextPrevRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextPrevRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextPrevRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NextPrevRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NextPrevRequest& from) {
    NextPrevRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextPrevRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playlist.NextPrevRequest";
  }
  protected:
  explicit NextPrevRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NextPrevRequest_Direction Direction;
  static constexpr Direction PREV =
    NextPrevRequest_Direction_PREV;
  static constexpr Direction NEXT =
    NextPrevRequest_Direction_NEXT;
  static inline bool Direction_IsValid(int value) {
    return NextPrevRequest_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    NextPrevRequest_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    NextPrevRequest_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    NextPrevRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return NextPrevRequest_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return NextPrevRequest_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Direction* value) {
    return NextPrevRequest_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
  };
  // .playlist.NextPrevRequest.Direction direction = 1;
  void clear_direction();
  ::playlist::NextPrevRequest_Direction direction() const;
  void set_direction(::playlist::NextPrevRequest_Direction value);
  private:
  ::playlist::NextPrevRequest_Direction _internal_direction() const;
  void _internal_set_direction(::playlist::NextPrevRequest_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:playlist.NextPrevRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playlist_2eproto;
};
// -------------------------------------------------------------------

class SongList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:playlist.SongList) */ {
 public:
  inline SongList() : SongList(nullptr) {}
  ~SongList() override;
  explicit PROTOBUF_CONSTEXPR SongList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SongList(const SongList& from);
  SongList(SongList&& from) noexcept
    : SongList() {
    *this = ::std::move(from);
  }

  inline SongList& operator=(const SongList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SongList& operator=(SongList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SongList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SongList* internal_default_instance() {
    return reinterpret_cast<const SongList*>(
               &_SongList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SongList& a, SongList& b) {
    a.Swap(&b);
  }
  inline void Swap(SongList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SongList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SongList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SongList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SongList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SongList& from) {
    SongList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SongList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playlist.SongList";
  }
  protected:
  explicit SongList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSongsFieldNumber = 1,
  };
  // repeated .playlist.Song songs = 1;
  int songs_size() const;
  private:
  int _internal_songs_size() const;
  public:
  void clear_songs();
  ::playlist::Song* mutable_songs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playlist::Song >*
      mutable_songs();
  private:
  const ::playlist::Song& _internal_songs(int index) const;
  ::playlist::Song* _internal_add_songs();
  public:
  const ::playlist::Song& songs(int index) const;
  ::playlist::Song* add_songs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playlist::Song >&
      songs() const;

  // @@protoc_insertion_point(class_scope:playlist.SongList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playlist::Song > songs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playlist_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:playlist.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "playlist.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:playlist.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_playlist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Song

// string name = 1;
inline void Song::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Song::name() const {
  // @@protoc_insertion_point(field_get:playlist.Song.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Song::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:playlist.Song.name)
}
inline std::string* Song::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:playlist.Song.name)
  return _s;
}
inline const std::string& Song::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Song::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Song::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Song::release_name() {
  // @@protoc_insertion_point(field_release:playlist.Song.name)
  return _impl_.name_.Release();
}
inline void Song::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:playlist.Song.name)
}

// int32 duration = 2;
inline void Song::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t Song::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t Song::duration() const {
  // @@protoc_insertion_point(field_get:playlist.Song.duration)
  return _internal_duration();
}
inline void Song::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void Song::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:playlist.Song.duration)
}

// -------------------------------------------------------------------

// NextPrevRequest

// .playlist.NextPrevRequest.Direction direction = 1;
inline void NextPrevRequest::clear_direction() {
  _impl_.direction_ = 0;
}
inline ::playlist::NextPrevRequest_Direction NextPrevRequest::_internal_direction() const {
  return static_cast< ::playlist::NextPrevRequest_Direction >(_impl_.direction_);
}
inline ::playlist::NextPrevRequest_Direction NextPrevRequest::direction() const {
  // @@protoc_insertion_point(field_get:playlist.NextPrevRequest.direction)
  return _internal_direction();
}
inline void NextPrevRequest::_internal_set_direction(::playlist::NextPrevRequest_Direction value) {
  
  _impl_.direction_ = value;
}
inline void NextPrevRequest::set_direction(::playlist::NextPrevRequest_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:playlist.NextPrevRequest.direction)
}

// -------------------------------------------------------------------

// SongList

// repeated .playlist.Song songs = 1;
inline int SongList::_internal_songs_size() const {
  return _impl_.songs_.size();
}
inline int SongList::songs_size() const {
  return _internal_songs_size();
}
inline void SongList::clear_songs() {
  _impl_.songs_.Clear();
}
inline ::playlist::Song* SongList::mutable_songs(int index) {
  // @@protoc_insertion_point(field_mutable:playlist.SongList.songs)
  return _impl_.songs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playlist::Song >*
SongList::mutable_songs() {
  // @@protoc_insertion_point(field_mutable_list:playlist.SongList.songs)
  return &_impl_.songs_;
}
inline const ::playlist::Song& SongList::_internal_songs(int index) const {
  return _impl_.songs_.Get(index);
}
inline const ::playlist::Song& SongList::songs(int index) const {
  // @@protoc_insertion_point(field_get:playlist.SongList.songs)
  return _internal_songs(index);
}
inline ::playlist::Song* SongList::_internal_add_songs() {
  return _impl_.songs_.Add();
}
inline ::playlist::Song* SongList::add_songs() {
  ::playlist::Song* _add = _internal_add_songs();
  // @@protoc_insertion_point(field_add:playlist.SongList.songs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::playlist::Song >&
SongList::songs() const {
  // @@protoc_insertion_point(field_list:playlist.SongList.songs)
  return _impl_.songs_;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace playlist

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::playlist::NextPrevRequest_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::playlist::NextPrevRequest_Direction>() {
  return ::playlist::NextPrevRequest_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_playlist_2eproto
