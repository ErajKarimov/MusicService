// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: playlist.proto

#include "playlist.pb.h"
#include "playlist.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace playlist {

static const char* Playlist_method_names[] = {
  "/playlist.Playlist/Play",
  "/playlist.Playlist/Pause",
  "/playlist.Playlist/NextPrev",
  "/playlist.Playlist/AddSong",
  "/playlist.Playlist/GetAllSongs",
  "/playlist.Playlist/UpdateConfig",
  "/playlist.Playlist/UpdateSong",
  "/playlist.Playlist/DeleteSong",
};

std::unique_ptr< Playlist::Stub> Playlist::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Playlist::Stub> stub(new Playlist::Stub(channel, options));
  return stub;
}

Playlist::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Play_(Playlist_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(Playlist_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NextPrev_(Playlist_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddSong_(Playlist_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllSongs_(Playlist_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateConfig_(Playlist_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSong_(Playlist_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSong_(Playlist_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Playlist::Stub::Play(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Play_, context, request, response);
}

void Playlist::Stub::async::Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Playlist::Stub::async::Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Play_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::Pause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void Playlist::Stub::async::Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Playlist::Stub::async::Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::NextPrevRequest, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NextPrev_, context, request, response);
}

void Playlist::Stub::async::NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::NextPrevRequest, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextPrev_, context, request, response, std::move(f));
}

void Playlist::Stub::async::NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextPrev_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::NextPrevRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NextPrev_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextPrevRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::AddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddSong_, context, request, response);
}

void Playlist::Stub::async::AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSong_, context, request, response, std::move(f));
}

void Playlist::Stub::async::AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddSong_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Song, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddSong_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddSongRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::SongList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Empty, ::playlist::SongList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllSongs_, context, request, response);
}

void Playlist::Stub::async::GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Empty, ::playlist::SongList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSongs_, context, request, response, std::move(f));
}

void Playlist::Stub::async::GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllSongs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::SongList>* Playlist::Stub::PrepareAsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::SongList, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllSongs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::SongList>* Playlist::Stub::AsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllSongsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateConfig_, context, request, response);
}

void Playlist::Stub::async::UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConfig_, context, request, response, std::move(f));
}

void Playlist::Stub::async::UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::UpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSong_, context, request, response);
}

void Playlist::Stub::async::UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSong_, context, request, response, std::move(f));
}

void Playlist::Stub::async::UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSong_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Song, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSong_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSongRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Playlist::Stub::DeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSong_, context, request, response);
}

void Playlist::Stub::async::DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSong_, context, request, response, std::move(f));
}

void Playlist::Stub::async::DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSong_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::PrepareAsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playlist::Empty, ::playlist::Song, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSong_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playlist::Empty>* Playlist::Stub::AsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSongRaw(context, request, cq);
  result->StartCall();
  return result;
}

Playlist::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Empty* req,
             ::playlist::Empty* resp) {
               return service->Play(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Empty* req,
             ::playlist::Empty* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::NextPrevRequest, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::NextPrevRequest* req,
             ::playlist::Empty* resp) {
               return service->NextPrev(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Song* req,
             ::playlist::Empty* resp) {
               return service->AddSong(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Empty, ::playlist::SongList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Empty* req,
             ::playlist::SongList* resp) {
               return service->GetAllSongs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Empty, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Empty* req,
             ::playlist::Empty* resp) {
               return service->UpdateConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Song* req,
             ::playlist::Empty* resp) {
               return service->UpdateSong(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Playlist_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Playlist::Service, ::playlist::Song, ::playlist::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Playlist::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playlist::Song* req,
             ::playlist::Empty* resp) {
               return service->DeleteSong(ctx, req, resp);
             }, this)));
}

Playlist::Service::~Service() {
}

::grpc::Status Playlist::Service::Play(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::Pause(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::NextPrev(::grpc::ServerContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::AddSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::GetAllSongs(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::SongList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::UpdateConfig(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::UpdateSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Playlist::Service::DeleteSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace playlist

