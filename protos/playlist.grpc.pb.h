// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: playlist.proto
#ifndef GRPC_playlist_2eproto__INCLUDED
#define GRPC_playlist_2eproto__INCLUDED

#include "playlist.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace playlist {

class Playlist final {
 public:
  static constexpr char const* service_full_name() {
    return "playlist.Playlist";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Play(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncPlay(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    virtual ::grpc::Status Pause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncPause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncPauseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncPause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncPauseRaw(context, request, cq));
    }
    virtual ::grpc::Status NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncNextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncNextPrevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncNextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncNextPrevRaw(context, request, cq));
    }
    virtual ::grpc::Status AddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncAddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncAddSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncAddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncAddSongRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::SongList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>> AsyncGetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>>(AsyncGetAllSongsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>> PrepareAsyncGetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>>(PrepareAsyncGetAllSongsRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncUpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncUpdateConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncUpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncUpdateConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncUpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncUpdateSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncUpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncUpdateSongRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> AsyncDeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(AsyncDeleteSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>> PrepareAsyncDeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>>(PrepareAsyncDeleteSongRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>* AsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::SongList>* PrepareAsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* AsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playlist::Empty>* PrepareAsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Play(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncPlay(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncPlayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncPlay(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncPlayRaw(context, request, cq));
    }
    ::grpc::Status Pause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncPause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncPauseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncPause(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncPauseRaw(context, request, cq));
    }
    ::grpc::Status NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncNextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncNextPrevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncNextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncNextPrevRaw(context, request, cq));
    }
    ::grpc::Status AddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncAddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncAddSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncAddSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncAddSongRaw(context, request, cq));
    }
    ::grpc::Status GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::SongList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::SongList>> AsyncGetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::SongList>>(AsyncGetAllSongsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::SongList>> PrepareAsyncGetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::SongList>>(PrepareAsyncGetAllSongsRaw(context, request, cq));
    }
    ::grpc::Status UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncUpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncUpdateConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncUpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncUpdateConfigRaw(context, request, cq));
    }
    ::grpc::Status UpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncUpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncUpdateSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncUpdateSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncUpdateSongRaw(context, request, cq));
    }
    ::grpc::Status DeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::playlist::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> AsyncDeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(AsyncDeleteSongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>> PrepareAsyncDeleteSong(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playlist::Empty>>(PrepareAsyncDeleteSongRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void Play(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void Pause(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void NextPrev(::grpc::ClientContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, std::function<void(::grpc::Status)>) override;
      void GetAllSongs(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::SongList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateConfig(::grpc::ClientContext* context, const ::playlist::Empty* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteSong(::grpc::ClientContext* context, const ::playlist::Song* request, ::playlist::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncNextPrevRaw(::grpc::ClientContext* context, const ::playlist::NextPrevRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncAddSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::SongList>* AsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::SongList>* PrepareAsyncGetAllSongsRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncUpdateConfigRaw(::grpc::ClientContext* context, const ::playlist::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncUpdateSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* AsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playlist::Empty>* PrepareAsyncDeleteSongRaw(::grpc::ClientContext* context, const ::playlist::Song& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Play_;
    const ::grpc::internal::RpcMethod rpcmethod_Pause_;
    const ::grpc::internal::RpcMethod rpcmethod_NextPrev_;
    const ::grpc::internal::RpcMethod rpcmethod_AddSong_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllSongs_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSong_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSong_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Play(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response);
    virtual ::grpc::Status Pause(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response);
    virtual ::grpc::Status NextPrev(::grpc::ServerContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response);
    virtual ::grpc::Status AddSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response);
    virtual ::grpc::Status GetAllSongs(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::SongList* response);
    virtual ::grpc::Status UpdateConfig(::grpc::ServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response);
    virtual ::grpc::Status UpdateSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response);
    virtual ::grpc::Status DeleteSong(::grpc::ServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Play() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::playlist::Empty* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Pause() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPause(::grpc::ServerContext* context, ::playlist::Empty* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NextPrev() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextPrev(::grpc::ServerContext* context, ::playlist::NextPrevRequest* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddSong() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSong(::grpc::ServerContext* context, ::playlist::Song* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSongs(::grpc::ServerContext* context, ::playlist::Empty* request, ::grpc::ServerAsyncResponseWriter< ::playlist::SongList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateConfig(::grpc::ServerContext* context, ::playlist::Empty* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSong() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSong(::grpc::ServerContext* context, ::playlist::Song* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSong() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSong(::grpc::ServerContext* context, ::playlist::Song* request, ::grpc::ServerAsyncResponseWriter< ::playlist::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Play<WithAsyncMethod_Pause<WithAsyncMethod_NextPrev<WithAsyncMethod_AddSong<WithAsyncMethod_GetAllSongs<WithAsyncMethod_UpdateConfig<WithAsyncMethod_UpdateSong<WithAsyncMethod_DeleteSong<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Play() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) { return this->Play(context, request, response); }));}
    void SetMessageAllocatorFor_Play(
        ::grpc::MessageAllocator< ::playlist::Empty, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Play(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Pause() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) { return this->Pause(context, request, response); }));}
    void SetMessageAllocatorFor_Pause(
        ::grpc::MessageAllocator< ::playlist::Empty, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pause(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NextPrev() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::NextPrevRequest, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::NextPrevRequest* request, ::playlist::Empty* response) { return this->NextPrev(context, request, response); }));}
    void SetMessageAllocatorFor_NextPrev(
        ::grpc::MessageAllocator< ::playlist::NextPrevRequest, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::NextPrevRequest, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextPrev(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddSong() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) { return this->AddSong(context, request, response); }));}
    void SetMessageAllocatorFor_AddSong(
        ::grpc::MessageAllocator< ::playlist::Song, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSong(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::SongList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Empty* request, ::playlist::SongList* response) { return this->GetAllSongs(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllSongs(
        ::grpc::MessageAllocator< ::playlist::Empty, ::playlist::SongList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::SongList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSongs(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Empty* request, ::playlist::Empty* response) { return this->UpdateConfig(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateConfig(
        ::grpc::MessageAllocator< ::playlist::Empty, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Empty, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSong() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) { return this->UpdateSong(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSong(
        ::grpc::MessageAllocator< ::playlist::Song, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSong(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSong() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playlist::Song* request, ::playlist::Empty* response) { return this->DeleteSong(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSong(
        ::grpc::MessageAllocator< ::playlist::Song, ::playlist::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playlist::Song, ::playlist::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSong(
      ::grpc::CallbackServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Play<WithCallbackMethod_Pause<WithCallbackMethod_NextPrev<WithCallbackMethod_AddSong<WithCallbackMethod_GetAllSongs<WithCallbackMethod_UpdateConfig<WithCallbackMethod_UpdateSong<WithCallbackMethod_DeleteSong<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Play() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Pause() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NextPrev() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddSong() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSong() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSong() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Play() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlay(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Pause() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPause(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NextPrev() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextPrev(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddSong() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddSong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllSongs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSong() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSong() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Play() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Play(context, request, response); }));
    }
    ~WithRawCallbackMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Play(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Pause() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Pause(context, request, response); }));
    }
    ~WithRawCallbackMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pause(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NextPrev() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NextPrev(context, request, response); }));
    }
    ~WithRawCallbackMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextPrev(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddSong() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddSong(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddSong(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllSongs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllSongs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSong() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSong(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSong(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSong() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSong(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSong(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Play : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Play() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Empty, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Empty, ::playlist::Empty>* streamer) {
                       return this->StreamedPlay(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Play() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Play(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlay(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Empty,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Pause : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Pause() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Empty, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Empty, ::playlist::Empty>* streamer) {
                       return this->StreamedPause(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Pause() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pause(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPause(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Empty,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NextPrev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NextPrev() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::NextPrevRequest, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::NextPrevRequest, ::playlist::Empty>* streamer) {
                       return this->StreamedNextPrev(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NextPrev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NextPrev(::grpc::ServerContext* /*context*/, const ::playlist::NextPrevRequest* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNextPrev(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::NextPrevRequest,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddSong() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Song, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Song, ::playlist::Empty>* streamer) {
                       return this->StreamedAddSong(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddSong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Song,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllSongs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllSongs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Empty, ::playlist::SongList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Empty, ::playlist::SongList>* streamer) {
                       return this->StreamedGetAllSongs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllSongs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllSongs(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::SongList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllSongs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Empty,::playlist::SongList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateConfig() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Empty, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Empty, ::playlist::Empty>* streamer) {
                       return this->StreamedUpdateConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateConfig(::grpc::ServerContext* /*context*/, const ::playlist::Empty* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Empty,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSong() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Song, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Song, ::playlist::Empty>* streamer) {
                       return this->StreamedUpdateSong(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Song,::playlist::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSong() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playlist::Song, ::playlist::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playlist::Song, ::playlist::Empty>* streamer) {
                       return this->StreamedDeleteSong(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSong(::grpc::ServerContext* /*context*/, const ::playlist::Song* /*request*/, ::playlist::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playlist::Song,::playlist::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Play<WithStreamedUnaryMethod_Pause<WithStreamedUnaryMethod_NextPrev<WithStreamedUnaryMethod_AddSong<WithStreamedUnaryMethod_GetAllSongs<WithStreamedUnaryMethod_UpdateConfig<WithStreamedUnaryMethod_UpdateSong<WithStreamedUnaryMethod_DeleteSong<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Play<WithStreamedUnaryMethod_Pause<WithStreamedUnaryMethod_NextPrev<WithStreamedUnaryMethod_AddSong<WithStreamedUnaryMethod_GetAllSongs<WithStreamedUnaryMethod_UpdateConfig<WithStreamedUnaryMethod_UpdateSong<WithStreamedUnaryMethod_DeleteSong<Service > > > > > > > > StreamedService;
};

}  // namespace playlist


#endif  // GRPC_playlist_2eproto__INCLUDED
